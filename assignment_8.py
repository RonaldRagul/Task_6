# -*- coding: utf-8 -*-
"""Assignment_8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17_7RTwKrw0gliyMlJVduUqQPWDi2FzgW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics

data = pd.read_csv("car_data.csv")
data.head()

print(data.isnull().sum())
print(data.shape)
print(data.info())

"""###Task1

**LinearRegression Between Mileage&Price**
"""

#Split data
x =data["Mileage"]
y =data["Price"]

x_train,y_train,x_test,y_test = train_test_split(x,y,test_size=0.2,random_state=2)
#Reshape model for best results
x_train = x_train.values.reshape(-1, 1)
x_test = x_test.values.reshape(-1, 1)
y_train = y_train.values.reshape(-1, 1)
y_test = y_test.values.reshape(-1, 1)

lr=LinearRegression()
lr.fit(x_train,x_test)
y_pred =lr.predict(x_test)

#Equation for Mileage&Price
print("Coefficient:",lr.coef_)
print("Intercept:",lr.intercept_)
Yeq=(x_test*lr.coef_)+lr.intercept_
#print("Value",Yeq)

"""**Plot the original data and the equation**"""

plt.xlabel("Mileage")
plt.ylabel("Price")
plt.scatter(x,y,color="red",marker="+")#,figsize=(10,10))
plt.plot(x_test,y_pred,color="blue")

"""**R2 score for the equation**"""

er_scr=metrics.r2_score(x_test,y_pred)
er_scr

data.head()

"""###Task2

**Use mileage, cylinders, liters, doors, cruise, sound, and leather to find the linear regression equation.**
"""

##fit data
x =data.drop(["Make","Model", "Trim", "Type","Price"],axis=1)
y =data["Price"]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=2)


##Linear Regression equation
lr=LinearRegression()
lr.fit(x_train,y_train)
y_pred =lr.predict(x_test)


print("coefficient:",lr.coef_)
print("Intercept",lr.intercept_)
eqs=(x_test*lr.coef_)+lr.intercept_
eqs

lr_diff = pd.DataFrame({'Actual value': y_test, 'Predicted value': y_pred})
lr_diff.head()

"""**R2 Score**"""

er_val=metrics.r2_score(y_test,y_pred)
er_val

"""**Find the combination of the factors that is the best predictor for price.**"""

corr = data.corr()["Price"].sort_values(ascending=False)[1:]
#print(corr)
abs_corr = abs(corr)
relevant_features = abs_corr[abs_corr>0.4]
print(relevant_features)

"""###Task3

**Research dummy variables in scikit-learn to see how to use the make, model, and body type.**
"""

print(data.Make.value_counts())
print(data.Model.value_counts())
print(data.Type.value_counts())

##Encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
data["Model"]=le.fit_transform(data["Model"])
print(data.Model.value_counts())

data["Type"]=le.fit_transform(data["Type"])
print(data.Type.value_counts())

data["Make"]=le.fit_transform(data["Make"])
print(data.Make.value_counts())

"""**Find the combination of the factors that is the best predictor for price.**"""

corr = data.corr()["Price"].sort_values(ascending=False)[1:]
#print(corr)
abs_corr = abs(corr)
relevant_features = abs_corr[abs_corr>0.4]
print(relevant_features)